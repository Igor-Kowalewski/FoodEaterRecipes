{"version":3,"file":"main.js","mappings":"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","sources":["./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/services/creator.service.ts","./src/app/shared/Ingredient.ts","./src/app/views/ingredientCreator.component.ts","./src/app/views/ingredientCreator.component.html","./src/app/views/recipeCreator.component.ts","./src/app/views/recipeCreator.component.html","./src/environments/environment.ts","./src/main.ts"],"sourcesContent":["import { Component } from '@angular/core';\n\n@Component({\n    selector: 'app-recipe-creator',\n    templateUrl: 'app.component.html',\n    styles: []\n})\nexport class AppComponent {\n    title = 'Add ingredient';\n}\n","<div class=\"row\">\r\n    <div class=\"col-12 col-md-6\">\r\n        <ingredientCreator></ingredientCreator>\r\n    </div>\r\n    <div class=\"col-12 col-md-6\">\r\n        <recipeCreator></recipeCreator>\r\n    </div>\r\n</div>","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { AppComponent } from './app.component';\nimport { Creator } from './services/creator.service';\r\nimport IngredientCreator from './views/ingredientCreator.component';\r\nimport RecipeCreator from './views/recipeCreator.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatDividerModule } from \"@angular/material/divider\";\r\nimport { MatListModule } from \"@angular/material/list\";\r\nimport { MatTableModule } from '@angular/material/table'\r\n//import { NgbdSortableHeader } from './directives/sortable.directive';\r\nimport { MatSortModule } from '@angular/material/sort';\r\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\r\n\r\n\r\n\n@NgModule({\n    declarations: [\n        AppComponent,\n        IngredientCreator,\n        RecipeCreator,\n        //NgbdSortableHeader\n    ],\n    imports: [\n        BrowserModule,\n        HttpClientModule,\n        BrowserAnimationsModule,\n        MatAutocompleteModule,\n        MatInputModule,\n        FormsModule,\n        MatDividerModule,\n        MatListModule,\n        MatTableModule,\n        MatSortModule,\n        FontAwesomeModule\n    ],\n    exports: [\n        MatAutocompleteModule,\n        MatInputModule\n    ],\n    providers: [\n        Creator\n    ],\n    bootstrap: [\n        AppComponent\n    ]\n})\nexport class AppModule { }\n","import { HttpClient, HttpHeaders, HttpParams } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { Observable, Subject } from \"rxjs\";\r\nimport { map } from \"rxjs/operators\";\r\nimport { Ingredient } from \"../shared/Ingredient\";\r\n\r\n@Injectable()\r\n export class Creator {\r\n\r\n    public tableDataPush: Subject<Ingredient> = new Subject<Ingredient>();\r\n    public tableDataPop: Subject<Ingredient> = new Subject<Ingredient>();\r\n    public tableDataEdit: Subject<Ingredient> = new Subject<Ingredient>();\r\n\r\n    public searchIngredients: Ingredient[] = [];\r\n    public recipeIngredients: Ingredient[] = [];\r\n    public recipeSummary: Ingredient = new Ingredient;\r\n\r\n    constructor(private http: HttpClient) {\r\n\r\n    }\r\n\r\n    // Zapytanie do kontrolera a następnie api@nutritionix.com\r\n    getIngredients(prefix: string): Observable<void> {\r\n        let url = \"/api/Ingredients\";\r\n        let headers = new HttpHeaders();\r\n        headers.append('Content-Type', 'application/json');\r\n\r\n        let params = new HttpParams().set(\"prefix\", prefix);\r\n\r\n        return this.http.get<Ingredient[]>(url, { headers: headers, params: params })\r\n            .pipe(map(data => {\r\n                this.searchIngredients = data\r\n                return;\r\n            }));\r\n    }\r\n}","export class Ingredient {\r\n\r\n    id: string;\r\n    name: string;\r\n    weight: number | string;\r\n    kcal: number | string;\r\n    carbs: number | string;\r\n    proteins: number | string;\r\n    fats: number | string;\r\n\r\n    constructor(ingredient?: Ingredient) {\r\n        this.id = crypto.randomUUID();\r\n        this.name = ingredient?.name ? ingredient.name : '';\r\n        this.weight = ingredient?.weight ? Number(ingredient.weight).toFixed(2) : 0;\r\n        this.kcal = ingredient?.kcal ? Number(ingredient.kcal).toFixed(2) : 0;\r\n        this.carbs = ingredient?.carbs ? Number(ingredient.carbs).toFixed(2) : 0;\r\n        this.fats = ingredient?.fats ? Number(ingredient.fats).toFixed(2) : 0;\r\n        this.proteins = ingredient?.proteins ? Number(ingredient.proteins).toFixed(2) : 0;\r\n    };\r\n\r\n    static isValid(i: Ingredient): boolean {\r\n\r\n        if (   i.name.length > 0\r\n            && i.weight > 0\r\n            && i.kcal > 0\r\n            && i.carbs > 0\r\n            && i.fats > 0\r\n            && i.proteins > 0 )\r\n        return true;\r\n\r\n        return false;\r\n    }\r\n}","import { HttpClient } from \"@angular/common/http\";\r\nimport { Component, Input, OnInit } from \"@angular/core\";\r\nimport { Creator } from \"../services/creator.service\";\r\nimport { Ingredient } from \"../shared/Ingredient\";\r\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\r\n\r\n\r\n\r\n@Component({\r\n    selector: \"ingredientCreator\",\r\n    templateUrl: \"ingredientCreator.component.html\"\r\n})\r\n\r\nexport default class IngredientCreator {\r\n    @Input() prefix!: string;            // wzorzec używany do wyszukiwania w API składników\r\n\r\n    public ingredientSelected: string = \"\";       // opcja wybrana na liście rozwijanej Autocomplete\r\n    public ingredientTemplate: Ingredient = new Ingredient;\r\n    public faPlus;\r\n\r\n\r\n    // inicjalizacja serwisu Creator - pobieranie danych z API do backendu i z backendu do frontendu\r\n    constructor(public creator: Creator) {\r\n        this.faPlus = faPlus;\r\n    }\r\n\r\n\r\n    ngOnInit(): void {\r\n        //this.creator.getIngredients(\"bread\").subscribe();     // było używane jedynie w ramach testu API\r\n\r\n        this.creator.tableDataEdit.subscribe((value) => {\r\n            let ingredientToEdit = this.creator.recipeIngredients.find(v => JSON.stringify(v) === JSON.stringify(value));\r\n            this.ingredientTemplate = new Ingredient(ingredientToEdit);\r\n        });\r\n    }\r\n\r\n\r\n    // update listy składników na liście rozwijanej kontrolki Autocomplete\r\n    updateIngredientList(prefix: string): void {\r\n        this.creator.getIngredients(this.prefix)\r\n            .subscribe();\r\n    }\r\n\r\n\r\n    // znajduję pierwszy element z Autocomplete, który pokrywa się z szukanym wzorcem wybranym z listy\r\n    setTemplateIngredient(ingredientSelected: string) {\r\n        this.ingredientSelected = ingredientSelected;\r\n\r\n        let temp = this.creator.searchIngredients.find((i) => { return i.name === ingredientSelected });\r\n\r\n        if (temp !== undefined) {\r\n            this.ingredientTemplate = new Ingredient(temp);\r\n            console.log(this.ingredientTemplate);\r\n        }\r\n        else {\r\n            console.log(\"Autocomplete problem occured:\" + this.ingredientTemplate.name);\r\n        }\r\n    }\r\n\r\n\r\n    // dodawanie nowego składnika do przepisu\r\n    addIngredient(ingredientTemplate: Ingredient) {\r\n        let ingredientCopy: Ingredient = new Ingredient(ingredientTemplate); // shallow copy template\r\n        this.creator.tableDataPush.next(ingredientCopy); // and push copy to recipeingredients\r\n    }\r\n}","<div class=\"row border border-dark rounded-lg p-3 m-1 mb-3\">\r\n    <h5 class=\"h3\">Ingredient</h5>\r\n    <mat-divider></mat-divider><br>\r\n    <div class=\"container p-0 m-0\">\r\n        <!--<div class=\"col p-1 m-0 d-inline-block text-dark\">-->\r\n        <!--Zamieniam wersję ASP.NET na Angularową-->\r\n        <!--@Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = \"form-control p-2 m-0\", @id = \"SearchInputIngredient\", @placeholder = \"Search...\" }});-->\r\n        <!--</div>-->\r\n\r\n        <form class=\"col col-10 col-md-9 p-2 m-0 d-inline-block\">\r\n            <mat-form-field>\r\n                <input type=\"text\" name=\"prefix\" [(ngModel)]=\"prefix\" (ngModelChange)=\"updateIngredientList(prefix)\" matInput [matAutocomplete]=\"auto\" placeholder=\"Search ingredient\" />\r\n                <mat-autocomplete #auto=\"matAutocomplete\" panelWidth=\"auto\" (optionSelected)=\"setTemplateIngredient($event.option.value)\">\r\n                    <mat-option *ngFor=\"let i of creator.searchIngredients\" [value]=\"i.name\">\r\n                        {{i.name}}\r\n                    </mat-option>\r\n                </mat-autocomplete>\r\n            </mat-form-field>\r\n        </form>\r\n\r\n\r\n        <div class=\"col col-2 col-md-3 p-0 m-0 d-inline-block\">\r\n            <button class=\"btn btn-light btn-block\" id=\"addIngredientBtn\" (click)=\"addIngredient(ingredientTemplate)\"><fa-icon [icon]=\"faPlus\"></fa-icon></button>\r\n        </div>\r\n\r\n\r\n        <div class=\"col col-12 p-0 m-0 d-inline-block bg-dark rounded m-0 p-1\">\r\n            <div class=\"col col-6 m-0 p-0 d-inline-block\">\r\n                <form class=\"m-1 p-1\">\r\n                    <mat-form-field>\r\n                        <input matInput class=\"mat-form-field m-0 p-1\" required type=\"text\" placeholder=\"Name\" [(ngModel)]=\"ingredientTemplate.name\" name=\"name\" />\r\n                    </mat-form-field>\r\n                    <mat-form-field>\r\n                        <input matInput class=\"mat-form-field m-0 p-1\" numbersOnly required type=\"number\" placeholder=\"Weight (g)\" [(ngModel)]=\"ingredientTemplate.weight\" name=\"weight\" />\r\n                    </mat-form-field>\r\n                    <mat-form-field>\r\n                        <input matInput class=\"mat-form-field m-0 p-1\" numbersOnly required type=\"number\" min=\"0\" max=\"900\" placeholder=\"Kcal per 100g\" [(ngModel)]=\"ingredientTemplate.kcal\" name=\"kcal\" />\r\n                    </mat-form-field>\r\n                    <mat-form-field>\r\n                        <input matInput class=\"mat-form-field m-0 p-1\" numbersOnly required type=\"number\" min=\"0\" max=\"100\" placeholder=\"Carbohydrates per 100g\" [(ngModel)]=\"ingredientTemplate.carbs\" name=\"carbs\" />\r\n                    </mat-form-field>\r\n                    <mat-form-field>\r\n                        <input matInput class=\"mat-form-field m-0 p-1\" numbersOnly required type=\"number\" min=\"0\" max=\"100\" placeholder=\"Fats per 100g\" [(ngModel)]=\"ingredientTemplate.fats\" name=\"fats\" />\r\n                    </mat-form-field>\r\n                    <mat-form-field>\r\n                        <input matInput class=\"mat-form-field m-0 p-1\" numbersOnly required type=\"number\" min=\"0\" max=\"100\" placeholder=\"Proteins per 100g\" [(ngModel)]=\"ingredientTemplate.proteins\" name=\"proteins\" />\r\n                    </mat-form-field>\r\n                </form>\r\n            </div>\r\n\r\n            <!--<div class=\"col col-6 m-0 p-0 d-inline-block position-top\">\r\n                <mat-list>\r\n                    <mat-list-item> Pepper </mat-list-item>\r\n                    <mat-list-item> Salt </mat-list-item>\r\n                    <mat-list-item> Paprika </mat-list-item>\r\n                </mat-list>\r\n            </div>-->\r\n        </div>\r\n    </div>\r\n</div>\r\n","\r\nimport { Component, ViewChild } from \"@angular/core\";\r\nimport { HttpClient, HttpEventType, HttpRequest } from '@angular/common/http';\r\nimport { Creator } from \"../services/creator.service\";\r\nimport { Ingredient } from \"../shared/Ingredient\";\r\nimport { LiveAnnouncer } from '@angular/cdk/a11y';\r\nimport { MatSort, Sort } from '@angular/material/sort';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { faTrash, faPenToSquare } from '@fortawesome/free-solid-svg-icons';\r\n\r\n\r\n@Component({\r\n    selector: \"recipeCreator\",\r\n    templateUrl: \"recipeCreator.component.html\"\r\n})\r\n\r\n\r\nexport default class RecipeCreator {\r\n\r\n    public ingredients: Ingredient[] = [];\r\n    public recipeSummary: Ingredient = new Ingredient;\r\n    public faTrash;\r\n    public faPenToSquare;\r\n\r\n\r\n    working = false;\r\n    uploadFile?: File | null;\r\n    uploadFileLabel: string | undefined = 'Choose an image to upload';\r\n    uploadProgress: number = 0;\r\n    uploadUrl: string = '';\r\n\r\n\r\n\r\n    displayedColumns: string[] = ['name', 'weight', 'kcal', 'carbs', 'fats', 'proteins','actions'];\r\n    dataSource!: MatTableDataSource<Ingredient>;\r\n\r\n\r\n\r\n    constructor(private creator: Creator, private http: HttpClient, private _liveAnnouncer: LiveAnnouncer) {\r\n        this.ingredients = creator.recipeIngredients;\r\n        this.recipeSummary = creator.recipeSummary;\r\n        this.faTrash = faTrash;\r\n        this.faPenToSquare = faPenToSquare;\r\n    }\r\n\r\n\r\n    ngOnInit() {\r\n        this.creator.tableDataPush.subscribe((value) => {\r\n\r\n            if (Ingredient.isValid(value)) {\r\n                this.creator.recipeIngredients.push(value)\r\n                console.log(\"Adding ingredient: \" + value.name)\r\n                let temp = this.creator.recipeIngredients\r\n\r\n                this.dataSource = new MatTableDataSource(temp)\r\n                this.dataSource.sort = this.sort;\r\n\r\n                this.RefreshSummary();\r\n            }\r\n            else {\r\n                console.log(\"Ingredient invalid: \" + value.name)\r\n            }\r\n        });\r\n\r\n        this.creator.tableDataPop.subscribe((value) => {\r\n            let position = this.creator.recipeIngredients.findIndex(v => JSON.stringify(v) === JSON.stringify(value))\r\n            console.log(\"Deleting ingredient: \" + position + \". \" + value.name)\r\n            this.creator.recipeIngredients.splice(position,1)\r\n            let temp = this.creator.recipeIngredients\r\n\r\n            this.dataSource = new MatTableDataSource(temp)\r\n            this.dataSource.sort = this.sort;\r\n\r\n            this.RefreshSummary();\r\n        });\r\n\r\n        this.creator.tableDataEdit.subscribe((value) => {\r\n            let position = this.creator.recipeIngredients.findIndex(v => JSON.stringify(v) === JSON.stringify(value))\r\n            console.log(\"Edit ingredient: \" + position + \". \" + value.name)\r\n            this.creator.recipeIngredients.splice(position, 1)\r\n            let temp = this.creator.recipeIngredients\r\n\r\n            this.dataSource = new MatTableDataSource(temp)\r\n            this.dataSource.sort = this.sort;\r\n\r\n            this.RefreshSummary();\r\n        });\r\n    }\r\n\r\n\r\n    private RefreshSummary() {\r\n        this.creator.recipeSummary.weight = this.creator.recipeIngredients.reduce((sum, current) => sum + Number(current.weight), 0);\r\n        this.creator.recipeSummary.kcal = this.creator.recipeIngredients.reduce((sum, current) => sum + Number(current.kcal), 0);\r\n        this.creator.recipeSummary.carbs = this.creator.recipeIngredients.reduce((sum, current) => sum + Number(current.carbs), 0);\r\n        this.creator.recipeSummary.fats = this.creator.recipeIngredients.reduce((sum, current) => sum + Number(current.fats), 0);\r\n        this.creator.recipeSummary.proteins = this.creator.recipeIngredients.reduce((sum, current) => sum + Number(current.proteins), 0);\r\n        console.log(\"Refreshing recipe summary\");\r\n    }\r\n\r\n\r\n    /// RECIPE IMAGE UPLOAD\r\n    handleFileInput(files: FileList) {\r\n        if (files.length > 0) {\r\n            this.uploadFile = files.item(0);\r\n            this.uploadFileLabel = this.uploadFile?.name;\r\n        }\r\n    }\r\n\r\n\r\n    upload() {\r\n        if (!this.uploadFile) {\r\n            alert('Choose a file to upload first');\r\n            return;\r\n        }\r\n\r\n        const formData = new FormData();\r\n        formData.append(this.uploadFile.name, this.uploadFile);\r\n\r\n        const url = `/api/src/upload`;\r\n        const uploadReq = new HttpRequest('POST', url, formData, {\r\n            reportProgress: true,\r\n        });\r\n\r\n        this.uploadUrl = '';\r\n        this.uploadProgress = 0;\r\n        this.working = true;\r\n\r\n        this.http.request(uploadReq).subscribe((event: any) => {\r\n            if (event.type === HttpEventType.UploadProgress) {\r\n                this.uploadProgress = Math.round((100 * event.loaded) / event.total);\r\n            } else if (event.type === HttpEventType.Response) {\r\n                this.uploadUrl = event.body.url;\r\n            }\r\n        }, (error: any) => {\r\n            console.error(error);\r\n        }).add(() => {\r\n            this.working = false;\r\n        });\r\n    }\r\n\r\n\r\n    /// RECIPE INGREDIENTS TABLE\r\n    @ViewChild(MatSort) sort!: MatSort;\r\n\r\n\r\n    /// Announce the change in sort state for assistive technology.\r\n    announceSortChange(sortState: Sort) {\r\n\r\n        /// This example uses English messages. If your application supports\r\n        /// multiple language, you would internationalize these strings.\r\n        /// Furthermore, you can customize the message to add additional\r\n        /// details about the values being sorted.\r\n        if (sortState.direction) {\r\n            this._liveAnnouncer.announce(`Sorted ${sortState.direction}ending`);\r\n        } else {\r\n            this._liveAnnouncer.announce('Sorting cleared');\r\n        }\r\n    }\r\n\r\n\r\n    editIngredient(ingredient: Ingredient) {\r\n        this.creator.tableDataEdit.next(ingredient);\r\n    }\r\n\r\n    deleteIngredient(ingredient: Ingredient) {\r\n        this.creator.tableDataPop.next(ingredient);\r\n    }\r\n\r\n}","<div class=\"row border border-dark rounded-lg p-3 m-1 mb-3\">\r\n    <h5 class=\"h3\">Recipe</h5>\r\n    <mat-divider></mat-divider>\r\n    <br>\r\n    <div class=\"container p-0 m-0\">\r\n        <!--<div class=\"row card bg-dark table-responsive p-0 m-0 col col-12\">\r\n            <div class=\"card-body p-0 m-0\">\r\n                <table mat-table class=\"table table-hover text-center table-striped table-dark text-light p-0 m-0\">\r\n                    <thead class=\"thead-dark\">\r\n                        <tr p-0 m-0>\r\n                            <th scope=\"col\">#</th>\r\n                            <th>Name</th>\r\n                            <th>Weight</th>\r\n                            <th>Kcal</th>\r\n                            <th>Carbs</th>\r\n                            <th>Fats</th>\r\n                            <th>Proteins</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr *ngFor=\"let i of ingredients; let j = index\">\r\n                            <td scope=\"col\">{{ j+1 }}</td>\r\n                            <td scope=\"col\">{{ i.name }}</td>\r\n                            <td scope=\"col\">{{ i.weight | number : '1.0-0' }}</td>\r\n                            <td scope=\"col\">{{ i.kcal | number : '1.0-0' }}</td>\r\n                            <td scope=\"col\">{{ i.carbs | number : '1.0-0' }}</td>\r\n                            <td scope=\"col\">{{ i.fats | number : '1.0-0' }}</td>\r\n                            <td scope=\"col\">{{ i.proteins | number : '1.0-0' }}</td>\r\n                        </tr>\r\n                    </tbody>\r\n                    <tfoot>\r\n                        <tr>\r\n                            <td scope=\"row\"><strong>Total:</strong></td>\r\n                            <td>{{ recipeSummary.name | number : '1.0-0' }}</td>\r\n                            <td>{{ recipeSummary.weight | number : '1.0-0' }}</td>\r\n                            <td>{{ recipeSummary.kcal | number : '1.0-0' }}</td>\r\n                            <td>{{ recipeSummary.carbs | number : '1.0-0' }}</td>\r\n                            <td>{{ recipeSummary.fats | number : '1.0-0' }}</td>\r\n                            <td>{{ recipeSummary.proteins | number : '1.0-0' }}</td>\r\n                        </tr>\r\n                    </tfoot>\r\n                </table>\r\n            </div>\r\n        </div>-->\r\n\r\n\r\n        <div class=\"card bg-dark table-responsive p-0 m-0 col col-12\">\r\n            <table mat-table [dataSource]=\"dataSource\" matSort (matSortChange)=\"announceSortChange($event)\"\r\n                   class=\"mat-elevation-z8\">\r\n\r\n                <!-- Name Column -->\r\n                <ng-container matColumnDef=\"name\">\r\n                    <th mat-header-cell *matHeaderCellDef mat-sort-header sortActionDescription=\"Sort by name\">\r\n                        Name\r\n                    </th>\r\n                    <td mat-cell *matCellDef=\"let element\"> {{element.name}} </td>\r\n                </ng-container>\r\n\r\n                <!-- Weight Column -->\r\n                <ng-container matColumnDef=\"weight\">\r\n                    <th mat-header-cell *matHeaderCellDef mat-sort-header sortActionDescription=\"Sort by weight\">\r\n                        Weight\r\n                    </th>\r\n                    <td mat-cell class=\"ml-1\" *matCellDef=\"let element\"> {{element.weight | number : '1.0-0' }} </td>\r\n                </ng-container>\r\n\r\n\r\n                <!-- Kcal Column -->\r\n                <ng-container matColumnDef=\"kcal\">\r\n                    <th mat-header-cell *matHeaderCellDef mat-sort-header sortActionDescription=\"Sort by kcal\">\r\n                        Kcal\r\n                    </th>\r\n                    <td mat-cell class=\"ml-1\" *matCellDef=\"let element\"> {{element.kcal | number : '1.0-0' }} </td>\r\n                </ng-container>\r\n\r\n\r\n                <!-- Carbs Column -->\r\n                <ng-container matColumnDef=\"carbs\">\r\n                    <th mat-header-cell *matHeaderCellDef mat-sort-header sortActionDescription=\"Sort by carbs\">\r\n                        Carbs\r\n                    </th>\r\n                    <td mat-cell class=\"ml-1\" *matCellDef=\"let element\"> {{element.carbs | number : '1.0-0' }} </td>\r\n                </ng-container>\r\n\r\n\r\n                <!-- Fats Column -->\r\n                <ng-container matColumnDef=\"fats\">\r\n                    <th mat-header-cell *matHeaderCellDef mat-sort-header sortActionDescription=\"Sort by fats\">\r\n                        Fats\r\n                    </th>\r\n                    <td mat-cell class=\"ml-1\" *matCellDef=\"let element\"> {{element.fats | number : '1.0-0' }} </td>\r\n                </ng-container>\r\n\r\n\r\n                <!-- Proteins Column -->\r\n                <ng-container matColumnDef=\"proteins\">\r\n                    <th mat-header-cell *matHeaderCellDef mat-sort-header sortActionDescription=\"Sort by proteins\">\r\n                        Proteins\r\n                    </th>\r\n                    <td mat-cell class=\"ml-1\" *matCellDef=\"let element\"> {{element.proteins | number : '1.0-0' }} </td>\r\n                </ng-container>\r\n\r\n\r\n\r\n                <!-- Edit, Delete -->\r\n                <ng-container matColumnDef=\"actions\">\r\n                    <mat-header-cell *matHeaderCellDef></mat-header-cell>\r\n                    <mat-cell *matCellDef=\"let element\">\r\n                        <!-- 'element' przekazuje guid danego składnika! -->\r\n                        <button class=\"btn btn-info ml-1\" (click)=\"editIngredient(element)\" mat-button>\r\n                            <fa-icon [icon]=\"faPenToSquare\"></fa-icon>\r\n                        </button>\r\n                        <button class=\"btn btn-danger ml-1\" (click)=\"deleteIngredient(element)\" mat-button>\r\n                            <fa-icon [icon]=\"faTrash\"></fa-icon>\r\n                        </button>\r\n                    </mat-cell>\r\n                </ng-container>\r\n\r\n\r\n                <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n                <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n\r\n            </table>\r\n        </div>\r\n\r\n\r\n\r\n        <!-- Image upload -->\r\n        <div class=\"row mt-3\">\r\n            <div class=\"col\">\r\n                <div class=\"custom-file\">\r\n                    <input type=\"file\" accept=\"image/*\" class=\"custom-file-input\" id=\"customFile\" (change)=\"handleFileInput($any($event.target).files)\" [disabled]=\"working\">\r\n                    <label class=\"custom-file-label\" for=\"customFile\">{{ uploadFileLabel }}</label>\r\n                </div>\r\n            </div>\r\n            <div class=\"col-auto pl-sm-0\">\r\n                <button type=\"button\" class=\"btn btn-light btn-block\" ngbTooltip=\"Upload\" (click)=\"upload()\" [disabled]=\"working\">Upload</button>\r\n            </div>\r\n        </div>\r\n        <div class=\"row mt-3\" *ngIf=\"working\">\r\n            <div class=\"col\">\r\n                <div class=\"progress\">\r\n                    <div class=\"progress-bar\" role=\"progressbar\" [ngStyle]=\"{ 'width': uploadProgress + '%' }\" [attr.aria-valuenow]=\"uploadProgress\" aria-valuemin=\"0\" aria-valuemax=\"100\">{{ uploadProgress }}%</div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"row mt-3\" *ngIf=\"uploadUrl?.length\">\r\n            <div class=\"col\">\r\n                <img [src]=\"uploadUrl\" alt=\"preview\" class=\"rounded shadow w-100\">\r\n            </div>\r\n        </div>\r\n\r\n\r\n    </div>\r\n</div>\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/plugins/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"names":[],"sourceRoot":"webpack:///","x_google_ignoreList":[]}