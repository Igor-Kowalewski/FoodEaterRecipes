{"version":3,"file":"main.js","mappings":"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","sources":["./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/services/creator.service.ts","./src/app/views/ingredientCreator.component.ts","./src/app/views/ingredientCreator.component.html","./src/app/views/recipeCreator.component.ts","./src/app/views/recipeCreator.component.html","./src/environments/environment.ts","./src/main.ts"],"sourcesContent":["import { Component } from '@angular/core';\n\n@Component({\n    selector: 'app-recipe-creator',\n    templateUrl: 'app.component.html',\n    styles: []\n})\nexport class AppComponent {\n    title = 'Add ingredient';\n}\n","<div class=\"row\">\r\n    <div class=\"col-12 col-md-6\">\r\n        <ingredientCreator></ingredientCreator>\r\n    </div>\r\n    <div class=\"col-12 col-md-6\">\r\n        <recipeCreator></recipeCreator>\r\n    </div>\r\n</div> ","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { AppComponent } from './app.component';\nimport { Creator } from './services/creator.service';\r\nimport IngredientCreator from './views/ingredientCreator.component';\r\nimport RecipeCreator from './views/recipeCreator.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\n\n@NgModule({\n    declarations: [\n        AppComponent,\n        IngredientCreator,\n        RecipeCreator\n    ],\n    imports: [\n        BrowserModule,\n        HttpClientModule,\n        BrowserAnimationsModule,\n        MatAutocompleteModule,\n        MatInputModule,\n        FormsModule\n    ],\n    exports: [\n        MatAutocompleteModule,\n        MatInputModule\n    ],\n    providers: [\n        Creator\n    ],\n    bootstrap: [\n        AppComponent\n    ]\n})\nexport class AppModule { }\n","import { HttpClient, HttpHeaders, HttpParams } from \"@angular/common/http\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { Observable } from \"rxjs\";\r\nimport { map } from \"rxjs/operators\";\r\nimport { Ingredient } from \"../shared/Ingredient\";\r\n\r\n@Injectable()\r\nexport class Creator {\r\n\r\n    constructor(private http: HttpClient) {\r\n\r\n    }\r\n\r\n    public ingredients: Ingredient[] = [];\r\n\r\n    getIngredients(prefix: string): Observable<void> {\r\n        let url = \"/api/Ingredients\";\r\n        let headers = new HttpHeaders();\r\n        headers.append('Content-Type', 'application/json');\r\n\r\n        let params = new HttpParams().set(\"prefix\", prefix);\r\n\r\n        return this.http.get<Ingredient[]>(url, { headers: headers, params: params })\r\n            .pipe(map(data => {\r\n                this.ingredients = data // tutaj trza poprawić \r\n                return;\r\n            }));\r\n    }\r\n}","import { HttpClient } from \"@angular/common/http\";\r\nimport { Component, Input, OnInit } from \"@angular/core\";\r\nimport { Creator } from \"../services/creator.service\";\r\nimport { Ingredient } from \"../shared/Ingredient\";\r\nimport { debounceTime } from 'rxjs/operators';\r\n\r\n\r\n\r\n@Component({\r\n    selector: \"ingredientCreator\",\r\n    templateUrl: \"ingredientCreator.component.html\"\r\n})\r\n\r\nexport default class IngredientCreator {\r\n    @Input() prefix!: string | string;                          // wzorzec używany do wyszukiwania w API składników\r\n\r\n    public ingredientSelectedInAutocomplete: string = \"\";       // opcja wybrana na liście rozwijanej Autocomplete\r\n\r\n    public ingredientSelectedIntoForm: Ingredient = {\r\n        name: \"\",\r\n        kcal: 0,\r\n        carbs: 0,\r\n        fats: 0,\r\n        proteins: 0\r\n    }\r\n\r\n\r\n    // inicjalizacja serwisu Creator - pobieranie danych z API do backendu i z backendu do frontendu\r\n    constructor(public creator: Creator) {\r\n\r\n    }\r\n\r\n\r\n    // było używane jedynie w ramach testu API\r\n    ngOnInit(): void {\r\n        //this.creator.getIngredients(\"bread\").subscribe();\r\n    }\r\n\r\n\r\n    // update listy składników na liście rozwijanej kontrolki Autocomplete\r\n    updateIngredientList(prefix: string): void {\r\n        this.creator.getIngredients(this.prefix)\r\n            .subscribe();\r\n    }\r\n\r\n\r\n    // znajduję pierwszy element z Autocomplete, który pokrywa się z szukanym wzorcem wybranym z listy\r\n    setTemplateIngredient(ingredientSelected: string) {\r\n        this.ingredientSelectedInAutocomplete = ingredientSelected;\r\n\r\n        let temp = this.creator.ingredients.find((i) => { return i.name === ingredientSelected });\r\n\r\n        if (temp !== undefined) {\r\n            this.ingredientSelectedIntoForm = temp;\r\n        }\r\n\r\n        console.log(this.ingredientSelectedIntoForm.name);\r\n    }\r\n\r\n}","<div class=\"row\">\r\n    <div class=\"container\">\r\n        <!--<div class=\"col p-1 m-0 d-inline-block text-dark\">-->\r\n        <!--Zamieniam wersję ASP.NET na Angularową-->\r\n        <!--@Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = \"form-control p-2 m-0\", @id = \"SearchInputIngredient\", @placeholder = \"Search...\" }});-->\r\n        <!--</div>-->\r\n\r\n        <form class=\"col col-10 col-md-9 p-2 m-0 d-inline-block\">\r\n            <mat-form-field>\r\n                <input type=\"text\" name=\"prefix\" [(ngModel)]=\"prefix\" (ngModelChange)=\"updateIngredientList(prefix)\" matInput [matAutocomplete]=\"auto\" placeholder=\"Search ingredient\" />\r\n                <mat-autocomplete #auto=\"matAutocomplete\" panelWidth=\"auto\" (optionSelected)=\"setTemplateIngredient($event.option.value)\">\r\n                    <mat-option *ngFor=\"let ingredient of creator.ingredients\" [value]=\"ingredient.name\">\r\n                        {{ingredient.name}}\r\n                    </mat-option>\r\n                </mat-autocomplete>\r\n            </mat-form-field>\r\n        </form>\r\n\r\n\r\n        <div class=\"col col-2 col-md-3 p-0 m-0 d-inline-block\">\r\n            <button class=\"btn btn-light btn-block\" id=\"addIngredientBtn\"><i class=\"fas fa-plus fa-1x\"></i> </button>\r\n        </div>\r\n\r\n\r\n        <div class=\"col col-12 p-0 m-0 d-inline-block text-center bg-dark rounded\">\r\n            <p class=\"p-0 m-0\" id=\"ingredientAdded\" style=\"height: 38px;\">Testowy div!</p>\r\n\r\n\r\n            <form class=\"col col-12\">\r\n                <input type=\"text\" [(ngModel)]=\"ingredientSelectedIntoForm.name\" name=\"name\" />\r\n                <input type=\"text\" [(ngModel)]=\"ingredientSelectedIntoForm.kcal\" name=\"kcal\" />\r\n                <input type=\"text\" [(ngModel)]=\"ingredientSelectedIntoForm.carbs\" name=\"carbs\" />\r\n                <input type=\"text\" [(ngModel)]=\"ingredientSelectedIntoForm.fats\" name=\"fats\" />\r\n                <input type=\"text\" [(ngModel)]=\"ingredientSelectedIntoForm.proteins\" name=\"proteins\" />\r\n            </form>\r\n        </div>\r\n\r\n    </div>\r\n</div>","\r\nimport { Component } from \"@angular/core\";\r\nimport { Creator } from \"../services/creator.service\";\r\nimport { Ingredient } from \"../shared/Ingredient\";\r\n\r\n@Component({\r\n    selector: \"recipeCreator\",\r\n    templateUrl: \"recipeCreator.component.html\"\r\n})\r\n\r\n\r\nexport default class RecipeCreator {\r\n    public ingredients: Ingredient[] = [];\r\n\r\n    constructor(private creator: Creator) {\r\n        this.ingredients = creator.ingredients;\r\n    }\r\n}","<div class=\"row\">\r\n    <ul>\r\n        <li *ngFor=\"let i of ingredients\">{{ i.name }}</li>\r\n    </ul>\r\n</div>","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/plugins/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"names":[],"sourceRoot":"webpack:///","x_google_ignoreList":[]}